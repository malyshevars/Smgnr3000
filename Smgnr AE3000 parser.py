#SAMOGONER AE 3000 –ø–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö 08.07.2025
#pip install chardet requests psycopg2-binary pandas matplotlib beautifulsoup4

import os
import time
import csv
import chardet
import requests
import psycopg2
import pandas as pd
import matplotlib.pyplot as plt

from datetime import datetime
from bs4 import BeautifulSoup

import config  # –∏–º–ø–æ—Ä—Ç–∏–º —Å–µ–∫—Ä–µ—Ç—ã –∏ URL –∏–∑ config.py

# –ü–∞–ø–∫–∞ –¥–ª—è CSV –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
ARCHIVE_FOLDER = "SMGNR"
os.makedirs(ARCHIVE_FOLDER, exist_ok=True)

# –¢–µ–∫—É—â–∏–π CSV-—Ñ–∞–π–ª (–ø–æ –¥–∞—Ç–µ)
current_day = datetime.now().strftime("%Y-%m-%d")
csv_file = os.path.join(ARCHIVE_FOLDER, f"data_log_{current_day}.csv")


def init_db():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞."""
    conn = psycopg2.connect(
        host=config.PG_HOST,
        port=config.PG_PORT,
        dbname=config.PG_DB,
        user=config.PG_USER,
        password=config.PG_PASSWORD
    )
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS smgnLogs (
            timestamp           TIMESTAMP PRIMARY KEY,
            runtime_minutes     INTEGER,
            temperature_cube    REAL,
            temperature_cool    REAL
        )
    """)
    conn.commit()
    cur.close()
    conn.close()


def write_to_db(data):
    """–ó–∞–ø–∏—Å–∞—Ç—å –æ–¥–∏–Ω —Ä—è–¥ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL."""
    try:
        conn = psycopg2.connect(
            host=config.PG_HOST,
            port=config.PG_PORT,
            dbname=config.PG_DB,
            user=config.PG_USER,
            password=config.PG_PASSWORD
        )
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO smgnLogs (timestamp, runtime_minutes, temperature_cube, temperature_cool)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (timestamp) DO NOTHING
        """, (
            data["timestamp"],
            data["runtime_minutes"],
            data["temperature_cube"],
            data["temperature_cool"]
        ))
        conn.commit()
        print(f"üì• –ó–∞–ø–∏—Å—å –≤ –ë–î: {data['timestamp']}")
    except Exception as e:
        print(f"[PostgreSQL ERROR] {e}. –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≤ CSV.")
    finally:
        try:
            cur.close()
            conn.close()
        except:
            pass


def fetch_data():
    """–°–∫–∞—á–∞—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å HTML —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç—ã."""
    try:
        resp = requests.get(config.URL, timeout=11)
        resp.raise_for_status()
        raw = resp.content
        enc = chardet.detect(raw)["encoding"] or "utf-8"
        html = raw.decode(enc, errors="replace")
        soup = BeautifulSoup(html, "html.parser")

        def extract(label):
            tag = soup.find(string=lambda t: t and label in t)
            if not tag:
                return None
            val = tag.split(":")[-1].strip()
            return val.rstrip("¬∞C").strip()

        runtime = extract("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")
        cube    = extract("–í –∫—É–±–µ")
        cool    = extract("–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ")

        return {
            "timestamp":         datetime.now(),
            "runtime_minutes":   int(runtime.split()[0]) if runtime else None,
            "temperature_cube":  float(cube)  if cube  else None,
            "temperature_cool":  float(cool)  if cool  else None
        }
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê] {e}")
        return None


def write_to_csv(data):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ CSV; –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∞–π–ª."""
    global current_day, csv_file
    if data is None:
        return
    today = datetime.now().strftime("%Y-%m-%d")
    if today != current_day:
        current_day = today
        csv_file = os.path.join(ARCHIVE_FOLDER, f"data_log_{current_day}.csv")
    header = ["timestamp", "runtime_minutes", "temperature_cube", "temperature_cool"]
    file_exists = os.path.isfile(csv_file)
    with open(csv_file, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(header)
        writer.writerow([
            data["timestamp"].strftime("%Y-%m-%d %H:%M:%S"),
            data["runtime_minutes"],
            data["temperature_cube"],
            data["temperature_cool"]
        ])
    print(f"üìù –ó–∞–ø–∏—Å—å –≤ CSV: {csv_file}")


def save_temp_graph(csv_path, date_str):
    """–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π CSV-–¥–µ–Ω—å."""
    try:
        df = pd.read_csv(csv_path, parse_dates=["timestamp"])
        df.set_index("timestamp", inplace=True)
        plt.figure(figsize=(10, 5))
        plt.plot(df.index, df["temperature_cube"], label="–ö—É–± (¬∞C)")
        plt.plot(df.index, df["temperature_cool"], label="–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ (¬∞C)")
        plt.xlabel("–í—Ä–µ–º—è")
        plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C")
        plt.title(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ {date_str}")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        graph_file = os.path.join(ARCHIVE_FOLDER, f"temp_graph_{date_str}.png")
        plt.savefig(graph_file)
        plt.close()
        print(f"[–ì–†–ê–§–ò–ö] –°–æ—Ö—Ä–∞–Ω—ë–Ω: {graph_file}")
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê –ì–†–ê–§–ò–ö–ê –¢–ï–ú–ü] {e}")


if __name__ == "__main__":
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î, –Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å CSV
    try:
        init_db()
    except Exception as e:
        print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å—Å—è –≤ CSV.")

    while True:
        data = fetch_data()
        if data:
            write_to_csv(data)
            write_to_db(data)
            save_temp_graph(csv_file, current_day)
            time.sleep(60)  # –∂–¥–∞—Ç—å 60 —Å–µ–∫—É–Ω–¥
        else:
            print("[–ü–û–í–¢–û–†] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è, —á–µ—Ä–µ–∑ 30 —Å–µ–∫")
            time.sleep(30)
